<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="NewItemTutorialAllPackagingInfo" xml:space="preserve">
    <value>- All packaging print/text must be readable in the image. It may be necessary to take multiple pictures of the fine print.</value>
  </data>
  <data name="NewItemTutorialAnglesInfo" xml:space="preserve">
    <value>You will be asked to take pictures of the product from different angles as well as the fine print.</value>
  </data>
  <data name="NewItemTutorialBad" xml:space="preserve">
    <value>Bad</value>
  </data>
  <data name="NewItemTutorialBadExamples" xml:space="preserve">
    <value>Bad Images Examples:</value>
  </data>
  <data name="NewItemTutorialEliminateGlare" xml:space="preserve">
    <value>- Eliminate as much glare as possible.</value>
  </data>
  <data name="NewItemTutorialFailImageBackgroundNotClear" xml:space="preserve">
    <value>Background is not clear/shows unnecessary items</value>
  </data>
  <data name="NewItemTutorialFailImageBlurry" xml:space="preserve">
    <value>Image is blurry and bag is scrunched</value>
  </data>
  <data name="NewItemTutorialFailImageHandInPhoto" xml:space="preserve">
    <value>Hand in photo</value>
  </data>
  <data name="NewItemTutorialFailImageIngredientsBlurry" xml:space="preserve">
    <value>Ingredients are blurry and unreadable</value>
  </data>
  <data name="NewItemTutorialFailImageIreelevantPhoto" xml:space="preserve">
    <value>Irrelevant photo</value>
  </data>
  <data name="NewItemTutorialFailImageIsCutOff" xml:space="preserve">
    <value>Image is cut off/ make sure coupon is not covering text</value>
  </data>
  <data name="NewItemTutorialFailImageIsDistorted" xml:space="preserve">
    <value>Image is distorted/can't tell size</value>
  </data>
  <data name="NewItemTutorialFailImageNoUpc" xml:space="preserve">
    <value>No UPC</value>
  </data>
  <data name="NewItemTutorialFailImagePackagingDamaged" xml:space="preserve">
    <value>Packaging is damaged</value>
  </data>
  <data name="NewItemTutorialFailImageProductNotShown" xml:space="preserve">
    <value>All of product/text isn't shown/ must move flap to image all text</value>
  </data>
  <data name="NewItemTutorialFailImageShelfPrice" xml:space="preserve">
    <value>Shelf/Price is also pictured</value>
  </data>
  <data name="NewItemTutorialFailImageTopNotPictured" xml:space="preserve">
    <value>Top tab is not pictured individually</value>
  </data>
  <data name="NewItemTutorialFailImageUnnecessaryProduct" xml:space="preserve">
    <value>Unnecessary product that did not appear on generation list</value>
  </data>
  <data name="NewItemTutorialFailImageUpcCoveredByText" xml:space="preserve">
    <value>UPC is covered by text</value>
  </data>
  <data name="NewItemTutorialFailImageUpcCutOff" xml:space="preserve">
    <value>UPC is cut off</value>
  </data>
  <data name="NewItemTutorialFailImageUpcNotPictured" xml:space="preserve">
    <value>UPC isn't pictured correctly</value>
  </data>
  <data name="NewItemTutorialFailImageUpcUnreadable" xml:space="preserve">
    <value>Glare on front/UPC unreadable</value>
  </data>
  <data name="NewItemTutorialFillScreenInfo" xml:space="preserve">
    <value>- Fill up as much of the screen with the product as possible for a minimal background.</value>
  </data>
  <data name="NewItemTutorialFirstStepComplete" xml:space="preserve">
    <value>You have completed the first step in submitting this product.</value>
  </data>
  <data name="NewItemTutorialGood" xml:space="preserve">
    <value>Good</value>
  </data>
  <data name="NewItemTutorialGuidelineHeader" xml:space="preserve">
    <value>Product Image Collection Guidelines:</value>
  </data>
  <data name="NewItemTutorialHumanPictures" xml:space="preserve">
    <value>- Please avoid images containing human pictures.</value>
  </data>
  <data name="NewItemTutorialNext" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="NewItemTutorialNote" xml:space="preserve">
    <value>NOTE: Please use sufficient light and capture each angle for the best product picture.</value>
  </data>
  <data name="NewItemTutorialPackagingInfo" xml:space="preserve">
    <value>- Take pictures of all packaging sides even if there isn't any wording or pictures.</value>
  </data>
  <data name="NewItemTutorialQueueInfo" xml:space="preserve">
    <value>Please take atleast one image for the following angles: Front, Back, Top, Bottom, Left, Right</value>
  </data>
  <data name="NewItemTutorialTips" xml:space="preserve">
    <value>Tips for the best quality images:</value>
  </data>
</root>